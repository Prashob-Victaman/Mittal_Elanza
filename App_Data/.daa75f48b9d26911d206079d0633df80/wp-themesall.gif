<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="HandheldFriendly" content="true" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <title>%title%</title>
<meta name="description" content="%description%">
<meta name="keywords" content="%keyword%">

    
    
    

    <!-- ========== CSS INCLUDES ========== -->
    <link rel="stylesheet" href="assets/css/master.css">
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="css/map-icons.css">
    <style>
    .error_input {
        border: 2px solid #D31E2B !important;
    }
    </style>
  <!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-K868XZL');</script>
<!-- End Google Tag Manager -->  
    
    
<script type="application/ld+json">
{
  "@context": "http://schema.org",
  "@type": "Organization",
    "name": "Mittal Elanza",
    "url": "http://www.mittalelanza.com",
  "contactPoint": {
    "@type": "ContactPoint",
    "telephone": "+91 72596 66888",
    "contactType": "Customer service"
},
  "aggregateRating": {
    "@type": "AggregateRating",
    "ratingValue": "4.8",
    "reviewCount": "9"
},
  "address" : {
        "@type" : "PostalAddress",
        "name" : "Mittal Elanza Project",
        "streetAddress" : "Survey No: 92/5A, 92/5B Kogilu Village, Yelahanka Hobli",
        "addressLocality" : "Bangalore",
        "addressRegion" : "Karnataka",
        "postalCode" : "560064",
        "addressCountry" : "India"
},
  "hasPos" : {
    "@type" : "Place",
    "name" : "The project location or site",
    "photo" : "http://www.mittalelanza.com/assets/img/map.jpg",
    "hasMap" : {
        "@type" : "Map",
        "url" : "https://www.google.co.in/maps/place/Mittal+Elanza/@13.1034923,77.619127,17z/data=!4m5!3m4!1s0x0:0x6798275f8e8e29d1!8m2!3d13.1034923!4d77.6213157"
    }}
}
</script>
    
   

<script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-94089154-1', 'auto');
      ga('send', 'pageview');

    </script>
<!-- Facebook Pixel Code -->
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '356486924743431');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=356486924743431&ev=PageView&noscript=1" alt="facebook"
/></noscript>
<!-- End Facebook Pixel Code -->
</head>

 <body>
     <!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-K868XZL"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
     <div id="feedback">
		<div id="feedback-form" style="display:none;" >
			<form method="post" class="form fanel-body" role="form" action="interest.php">
                                <div class="field">
                                <input type="text" class="homeform col-sm-12 col-xs-12" name="name" placeholder="Name" required>
                                </div>
                                <div class="field">
                                <input type="tel" class="homeform col-sm-12 col-xs-12" maxlength="10" name="phone" placeholder="Phone Number" required>
                                </div>
                                <div class="field">
                                <input type="email" class="homeform col-sm-12 col-xs-12" name="email" placeholder="Email id" required>
                                </div>
                                <div class="actions">
                                <input type="submit" id="register" value="SUBMIT" class="homesub col-sm-8 col-xs-12  col-sm-offset-2" disabled="disabled">
                                </div>
                            </form>
		</div>
		<div id="feedback-tab"></div>
             
	</div>
     
    <!-- ========== LOADER ========== -->
    <div id="overlay" class="loader">
        <div id="progstat">
            <img src="assets/img/logo-splash.png" alt="Mittal Universal" title="Mittal Universal" class="splash" />
        </div>
        <div id="progress"></div>
    </div>
    <!-- ==========  START MENU ========== -->
    <div class="menu middle">
        <div class="">
            <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target=".menu nav > ul">
                <span class="icon-bar first"></span>
                <span class="icon-bar first-2"></span>
                <span class="icon-bar last"></span>
            </button>
            <div class="navbar-brand">
                %INSIDE_LINK_0%
            </div>
            <div class="navbar-brand2">
                %INSIDE_LINK_1%
            </div>
            <nav class="navpad">
                <!-- ============== NAVIGATION ============= -->
                <ul class="nav">
                    <li class="active">
                        %INSIDE_LINK_2%
                    </li>
                    <li>
                        %INSIDE_LINK_3%
                    </li>
                    <li>
                        %INSIDE_LINK_4%
                    </li>
                    <li>
                        %INSIDE_LINK_5%
                    </li>
                    <li>
                        %INSIDE_LINK_6%
                    </li>
                    <li>
                        %INSIDE_LINK_7%
                    </li>
                    <li>
                        %INSIDE_LINK_8%
                    </li>
                    <li>
                        %INSIDE_LINK_9%
                    </li>
                </ul>
            </nav>
        </div>
    </div>
    <!-- ========== END MENU ========== -->
    <!-- ================================ -->
    <!-- ========== STARTING SLIDER REVOLUTION ========== -->
    <!-- ================================ -->
    <div class="tp-banner-container">
        <div id="slider" class="tp-banner">
            <ul>
                <!-- ================================ -->
                <!-- ========== SLIDE 1  ========== -->
                <!-- ================================ -->
                <li data-transition="fade" data-slotamount="7" data-masterspeed="500" data-saveperformance="off">
                    <!-- MAIN IMAGE -->
                    <img src="assets/img/slide/banner.jpg" alt="seabg1" data-lazyload="assets/img/slide/banner.jpg" data-bgposition="center center" data-bgfit="cover" data-bgrepeat="no-repeat">
                    
                    <div class="banner-caption"><br>
                        <h2 class="sub-caption"><br></h2>
                    </div>
                </li>
                <!-- ================================ -->
                <!-- ==========  END SLIDE 2 ========== -->
                <!-- ================================ -->
            </ul>
            <div class="tp-bannertimer"></div>
        </div>
        <!-- end slider -->
    </div>
    <!-- end tp-container -->
    <!-- ========== END SLIDER REVOLUTION ========== -->
    <!-- ================================ -->
    <!-- ================================ -->
    <!-- ============== ARROW  ================ -->
    <!-- ================================ -->
    <!-- <div class="arrow" style="margin-top:-0.5rem;">
        <a href="#information" data-easing="easeInOutCubic" data-scroll="" data-speed="900" data-url="false"><i class="fa fa-angle-double-down"></i></a>
    </div> -->
    <!--end arrow  -->
    <!-- ============== END ARROW ================ -->
    <!-- ================================ -->
    <div class="clearfix"></div>
    <!-- ================================ -->
    <!-- ========== START FEATURES ========== -->
    <!-- ================================ -->
    <!-- ================================ -->
    <!-- ================================ -->
    <section class="" id="information">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <div class="gallery">
                        <div class="gallery-box fadeInUp">
                            <h1></h1>
                        </div>
                        <!-- end features title -->
                    </div>
                    <div class="property fadeInUp tac">
                        <p><br><br></p>
                        <br>
                        <h1><img src="assets/img/mittaluniversal-logo.png" title="Mittal Universal" alt="Mittal Universal Logo"/></h1>
                        <br>
                    </div>
                    <!-- end features title -->
                </div>
                <!-- end col-sm-12 -->
            </div>
        </div>
    </section>
    <!-- ========== END FEATURES ========== -->
    <!-- ================================ -->
    <!-- ========== STARTING DESCRIPTION SECTION ========== -->
    <!-- ================================ -->
    <section class="bgk bgk1" id="description">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 descriptions despad">
                    <div class="property fadeInUp">
                        <div class="gallery">
                            <div class="gallery-box fadeInUp">
                                <h1></h1>
                            </div>
                            <!-- end features title -->
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="categories3">
                            <ul class="clearfix" data-option-key="filter">
                                <li>
                                    %INSIDE_LINK_10%
                                </li>
                                <li>
                                    %INSIDE_LINK_11%
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="row col-sm-12">
                        <div class="contentGallery3 row">
                            <ul class="clearfix">
                                <li class="description col-sm-12 tac">
                                    <p></p>
                                    <p></p>
                                    <p></p>
                                    <p></p>
                                    <br><br>	
                                    
                                    	<div class="col-centered col-sm-10 colcen"><iframe class="dib" src="https://www.youtube.com/embed/INVizqo_is0?ecver=2" width="640" height="360" frameborder="0"></iframe></div>
                                    
                                </li>
                                <li class="specifications col-sm-12">
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="col-sm-4">
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <div class="col-sm-4">
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <div class="col-sm-4">
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                                <div id="sub-box">
                                                    <i class="fa fa fa-arrow-circle-o-right"></i> <span><strong></strong></span>
                                                    <ul class="desc_ul">
                                                        <li></li>
                                                        <li></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <!-- end ContetnGallery -->
                    </div>
                </div>
                <!--end col-sm-7 -->
            </div>
            <!--end row -->
        </div>
        <!--end container -->
    </section>
    <!-- ================================ -->
    <!-- ========== END DESCRIPTION SECTION ========== -->
    <!-- ================================ -->
    <section class="bgk" id="amenities">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 descriptions despad">
                    <div class="property fadeInUp">
                        <div class="gallery">
                            <div class="gallery-box fadeInUp">
                                <h1></h1>
                            </div>
                            <!-- end features title -->
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="categories5">
                            <ul class="clearfix" data-option-key="filter">
                                <li>
                                    %INSIDE_LINK_12%
                                </li>
                                <li>
                                    %INSIDE_LINK_13%
                                </li>
                                <li>
                                    %INSIDE_LINK_14%
                                </li>
                                <li>
                                    %INSIDE_LINK_15%
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="row col-sm-12">
                        <div class="contentGallery5 row">
                            <ul class="clearfix">
                                <li class="clubhouse col-sm-12">
                                    <div class="row">
                                        <div class="col-sm-8">
                                            <img src="assets/img/clubhouse.jpg" alt="Mittal Elanza Clubhouse"/>
                                        </div>
                                        <div class="col-sm-4">
                                            <p></p>
                                        </div>
                                    </div>
                                </li>
                                <li class="skygarden col-sm-12">
                                    <div class="row">
                                        <div class="col-sm-8">
                                            <img src="assets/img/skygarden.jpg" alt="Mittal Elanza Skygarden"/>
                                        </div>
                                        <div class="col-sm-4">
                                            <p></p>
                                        </div>
                                    </div>
                                </li>
                                <li class="infinitypool col-sm-12">
                                    <div class="row">
                                        <div class="col-sm-8">
                                            <img src="assets/img/infinitypool.jpg" alt="Mittal Elanza Infinity Pool"/>
                                        </div>
                                        <div class="col-sm-4">
                                            <p></p>
                                        </div>
                                    </div>
                                </li>
                                <li class="security col-sm-12">
                                    <div class="row">
                                        <div class="col-sm-8">
                                            <img src="assets/img/security.jpg" alt="Mittal Elanza Security"/>
                                        </div>
                                        <div class="col-sm-4">
                                            <p></p>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <!-- end ContetnGallery -->
                    </div>
                </div>
                <!--end col-sm-7 -->
            </div>
            <!--end row -->
        </div>
        <!--end container -->
    </section>
    <section id="neighbor" class="bgk bgk1 neibgk">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <div class="gallery-box fadeInUp">
                        <h3></h3>
                    </div>
                    <!-- end features title -->
                </div>
                <!-- <div class="col-sm-12">
                    <div class="categories4">
                        <ul class="clearfix" data-option-key="filter">
                            <li>
                                <a href="#" class="selected" data-option-value=".map">
                                    <p>Location</p>
                                </a>
                            </li>
                            <li>
                                <a href="#" data-option-value=".neighbourhood">
                                    <p>Neighbourhood</p>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div> -->
                <div class="row col-sm-12">
                    <div class="contentGallery4 row">
                        <ul class="clearfix">
                            <!-- <li class="map col-sm-12">
                                <div class="col-sm-12 tac">
                                    <p>Located in Kogilu, off Hebbal,the rapidly developing belt of North Bangalore, Mittal Elanza offersflats Nestled amidst an extensive lush green cover and dotted by a number of lakes, these flats in North Bangalore offer complete peace of mind.in Kogilu that give you a calm &amp; serene environment.</p>
                                    <p>Add to that the close proximity it has to numerous residential, commercial, educational &amp; recreational hubs and you have a winner on your hands. So live free, do more, don’t let anything hold you back. There’s more to life.</p>
                                    <br>
                                    <br>
                                    <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3885.933845671498!2d77.62129424999998!3d13.1033774!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3bae19a7905cb101%3A0x507e4ab33f8dddd9!2sMittal+Elanza%2C+Agrahara+Layout%2C+Bengaluru%2C+Karnataka+560064!5e0!3m2!1sen!2sin!4v1440412963295" frameborder="0" style="border:0;width:100%;height:400px;" allowfullscreen></iframe>
                                </div>
                            </li> -->
                            <li class="neighbourhood col-sm-12">
                                    <div class="box col-md-4 col-sm-6 col-xs-12">
                                        <i class="fa fa-road"></i>
                                        <div class="infoContent">
                                            <h4></h4>
                                            <p></p>
                                        </div>
                                    </div>
                                    <div class="box col-md-4 col-sm-6 col-xs-12">
                                        <i class="fa fa-plus"></i>
                                        <div class="infoContent">
                                            <h4></h4>
                                            <p></p>
                                        </div>
                                    </div>
                                    
                                    <div class="clearfix visible-sm"></div>

                                    <div class="box col-md-4 col-sm-6 col-xs-12" id="left">
                                        <i class="fa fa-shopping-cart"></i>
                                        <div class="infoContent">
                                            <h4></h4>
                                            <p></p>
                                        </div>
                                    </div>

                                    <div class="clearfix visible-md visible-lg"></div>

                                <div class="box col-md-4 col-sm-6 col-xs-12">
                                    <i class="fa fa-university"></i>
                                    <div class="infoContent">
                                        <h4></h4>
                                        <p><ul class="desc_ul">
                                                <li></li>
                                                <li></li>
                                                <li></li>
                                                <li></li>
                                                <li></li>
                                                <li></li>
                                            </ul>
                                            <br/>
                                        </p>
                                    </div>
                                </div>

                                <div class="clearfix visible-sm"></div>

                                <div class="box col-md-4 col-sm-6 col-xs-12">
                                    <i class="fa fa-train"></i>
                                    <div class="infoContent">
                                        <h4></h4>
                                        <ul class="desc_ul">
                                            <li></li>
                                            <li></li>
                                            <li></li>
                                            <li></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="box col-md-4 col-sm-6 col-xs-12" id="left">
                                    <i class="fa fa-building"></i>
                                    <div class="infoContent">
                                        <h4></h4>
                                        <p></p>
                                    </div>
                                </div>
                            </li>
                        </ul>
                        <!--<div class="allButton">
						<a href="gallery.html">
							<p>view all photos</p>
						</a>
					</div>-->
                        <!-- end allButton -->
                    </div>
                    <!-- end ContetnGallery -->
                </div>
                <!-- ========== MAP ========== -->
            </div>
            <!-- end row-->
        </div>
        <!--end container -->
    </section>
    <!-- ================================ -->
    <!-- ========== END SECTION LOCATION ========== -->
    <!-- ================================ -->
    <!-- ================================ -->
    <!-- ========== START FOOTER ========== -->
    <!-- ================================ -->
    <!-- ================================ -->
    <section class="bgk bgk1">
        <div class="container">
            <div class="footer">
                <p class="left">
                    <small></small>
                </p>
                <div class="pull-right">
                    %INSIDE_LINK_16%
                    %INSIDE_LINK_17%
                    %INSIDE_LINK_18%
                    %INSIDE_LINK_19%
                </div>
            </div>
        </div>
    </section>
    <!-- ================================ -->
    <!-- ========== END FOOTER ========== -->
    <!-- ================================ -->
    <!-- ========== GO TOP ========== -->
    <div class="back-to-top icon-up-open"></div>
	<div class="modal fade" id="myModal" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg modone">
            <div class="modal-content">
					
                <div class="modal-body modtwo">		
					<h4 class="modal-title modthree"></h4>			
                   	<div class="row" >
						<div class="col-md-12 modfour">
							<p>%INSIDE_LINK_20%</p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
							<p>%text%</p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
							<p></p>
                            
						</div>
                   	</div>
                </div>
                
                <div class="modal-footer modfoot">
                    <button type="button" class="modbut" onclick="set_cookie();"></button>
                  </div>
        	</div>
        </div>
    </div>
    
    
    <script src="assets/js/jquery.js"></script>
    <script src="assets/js/bootstrap.min.js"></script><!-- 
    <script src="js/libs/jquery-1.7.1.min.js"></script> -->
    <script src="assets/js/plugins.js"></script><!-- 
    <script src="assets/js/map.js"></script> -->
    <script src="assets/js/main.js"></script>
    <script src="js/feedback.js"></script><!-- 
    <script src="assets/js/validation.js"></script> -->
    <!--[if lte IE 9 ]>
		<script src="assets/js/placeholder.js"></script>
		<script>
			jQuery(function() {
				jQuery('input, textarea').placeholder();
			});
		</script>
	<![endif]-->
    <!-- ================================================== -->
    <!-- =============== END JQUERY SCRIPTS ================ -->
    <!-- ================================================== -->
    <script>
    function isotope() {

        var container4 = jQuery('.contentGallery2 ul');

        container4.imagesLoaded(function() {

            container4.isotope();

        });

        container4.isotope();

        var jQueryoptionSets4 = jQuery('.categories2 ul'),

            jQueryoptionLinks = jQueryoptionSets4.find('a');

        jQueryoptionLinks.on("click", function() {

            var jQuerythis = jQuery(this);

            if (jQuerythis.hasClass('selected')) {

                return false;

            }
            var jQueryoptionSet4 = jQuerythis.parents('.categories2 ul');

            jQueryoptionSet4.find('.selected').removeClass('selected');

            jQuerythis.addClass('selected');

            var options = {},

                key = jQueryoptionSet4.attr('data-option-key'),

                value = jQuerythis.attr('data-option-value');

            value = value === 'false' ? false : value;

            options[key] = value;

            if (key === 'layoutMode' && typeof changeLayoutMode === 'function') {

                changeLayoutMode(jQuerythis, options)

            } else {

                container4.isotope(options);

            }

            return false;

        });

    };

    isotope();

    jQuery(window).resize(function() {

        isotope();

    });

    jQuery(document).ready(function($) {

        var $container = $('.contentGallery ul');
        $container.imagesLoaded(function() {
            $container.isotope({
                itemSelector: '.contentGallery ul',
                layoutMode: 'fitRows'
            });
            $container.isotope({
                filter: ':not(.video)'
            });
        });
        $('.all').click(function() {
            $container.isotope({
                filter: ':not(.video)'
            });

        });
        // $('#fancybox-frame').load(function() {
        //      $('#fancybox-content').height($(this).contents().find('body').height()+30);
        //    });



    });
    </script>
    <script>
    function isotope() {

        var container5 = jQuery('.contentGallery5 ul');

        container5.imagesLoaded(function() {

            container5.isotope();

        });

        container5.isotope();

        var jQueryoptionSets5 = jQuery('.categories5 ul'),

            jQueryoptionLinks = jQueryoptionSets5.find('a');

        jQueryoptionLinks.on("click", function() {

            var jQuerythis = jQuery(this);

            if (jQuerythis.hasClass('selected')) {

                return false;

            }
            var jQueryoptionSet5 = jQuerythis.parents('.categories5 ul');

            jQueryoptionSet5.find('.selected').removeClass('selected');

            jQuerythis.addClass('selected');

            var options = {},

                key = jQueryoptionSet5.attr('data-option-key'),

                value = jQuerythis.attr('data-option-value');

            value = value === 'false' ? false : value;

            options[key] = value;

            if (key === 'layoutMode' && typeof changeLayoutMode === 'function') {

                changeLayoutMode(jQuerythis, options)

            } else {

                container5.isotope(options);

            }

            return false;

        });

    };

    isotope();

    jQuery(window).resize(function() {

        isotope();

    });
    </script>
    <script>
    function isotope() {

        var container3 = jQuery('.contentGallery3 ul');

        container3.imagesLoaded(function() {

            container3.isotope();

        });

        container3.isotope();

        var jQueryoptionSets3 = jQuery('.categories3 ul'),

            jQueryoptionLinks = jQueryoptionSets3.find('a');

        jQueryoptionLinks.on("click", function() {

            var jQuerythis = jQuery(this);

            if (jQuerythis.hasClass('selected')) {

                return false;

            }
            var jQueryoptionSet3 = jQuerythis.parents('.categories3 ul');

            jQueryoptionSet3.find('.selected').removeClass('selected');

            jQuerythis.addClass('selected');

            var options = {},

                key = jQueryoptionSet3.attr('data-option-key'),

                value = jQuerythis.attr('data-option-value');

            value = value === 'false' ? false : value;

            options[key] = value;

            if (key === 'layoutMode' && typeof changeLayoutMode === 'function') {

                changeLayoutMode(jQuerythis, options)

            } else {

                container3.isotope(options);

            }

            return false;

        });

    };

    isotope();

    jQuery(window).resize(function() {

        isotope();

    });

    jQuery(document).ready(function($) {
        var $container2 = $('.contentGallery3 ul');
        $container2.imagesLoaded(function() {
            $container2.isotope({
                itemSelector: '.contentGallery3 ul',
                layoutMode: 'fitRows'
            });
            $container2.isotope({
                filter: '.description'
            });


        });

        var $container5 = $('.contentGallery5 ul');
        $container5.imagesLoaded(function() {
            $container5.isotope({
                itemSelector: '.contentGallery5 ul',
                layoutMode: 'fitRows'
            });
            $container5.isotope({
                filter: '.clubhouse'
            });


        });



    });
    </script>
    <script>
    function isotope() {

        var container4 = jQuery('.contentGallery4 ul');

        container4.imagesLoaded(function() {

            container4.isotope();

        });

        container4.isotope();

        var jQueryoptionSets4 = jQuery('.categories4 ul'),

            jQueryoptionLinks = jQueryoptionSets4.find('a');

        jQueryoptionLinks.on("click", function() {

            var jQuerythis = jQuery(this);

            if (jQuerythis.hasClass('selected')) {

                return false;

            }
            var jQueryoptionSet4 = jQuerythis.parents('.categories4 ul');

            jQueryoptionSet4.find('.selected').removeClass('selected');

            jQuerythis.addClass('selected');

            var options = {},

                key = jQueryoptionSet4.attr('data-option-key'),

                value = jQuerythis.attr('data-option-value');

            value = value === 'false' ? false : value;

            options[key] = value;

            if (key === 'layoutMode' && typeof changeLayoutMode === 'function') {

                changeLayoutMode(jQuerythis, options)

            } else {

                container4.isotope(options);

            }

            return false;

        });

    };

    isotope();

    jQuery(window).resize(function() {

        isotope();

    });

    // jQuery(document).ready(function($) {
    //     var $container4 = $('.contentGallery4 ul');
    //     $container4.imagesLoaded(function() {
    //         $container4.isotope({
    //             itemSelector: '.contentGallery4 ul',
    //             layoutMode: 'fitRows'
    //         });
    //         $container4.isotope({
    //             filter: '.map'
    //         });
    //     });

        var w_height = $(window).height();

        $('#information .container').css('min-height', w_height);
        $('#description .container').css('min-height', w_height);
        $('#neighbor .container').css('min-height', w_height);
        $('#amenities .container').css('min-height', w_height);

    });
    </script>


    


    <div class="floating-buttons">  
        %INSIDE_LINK_21%
    </div>

     <div class="floating-buttons1">  
         <p type="button" class="disclaimer" onclick="checkCookie();"></p>
    </div>

    <div class="floating-form floating-form-callback">
        <div class="overlay"></div>
        <div class="container col-sm-6 col-xs-12">
            <div class="col-centered form-wrap">
                <h3 class="tac"></h3>
                <form action="callback.php" method="post" class="contact-form form-common col-sm-8 col-xs-10 col-centered">
                    <input name="name" type="text" placeholder="Name" required minlength="2">
                    <input name="phone" type="tel" placeholder="Contact" required minlength="10">
                    <input name="email" type="email" placeholder="Email" required>
                    <input type="submit" value="GET AN INSTANT CALLBACK" required>
                </form>
                <div class="close"></div>
            </div>
        </div>
    </div>

    <div class="floating-form floating-form-e-brochure">
        <div class="overlay"></div>
        <div class="container col-sm-6 col-xs-12">
            <div class="col-centered  form-wrap">
                <h3 class="tac"></h3>
                <form action="e-brochure.php" method="post" class="contact-form form-common col-sm-8 col-xs-10 col-centered">
                    <input name="name" type="text" placeholder="Name" required minlength="2">
                    <input name="phone" type="tel" placeholder="Contact" required minlength="10">
                    <input name="email" type="email" placeholder="Email" required>
                    <input type="submit" value="DOWNLOAD E-BROCHURE" required>
                </form>
                <div class="close"></div>
            </div>
        </div>
    </div>

    <script>
    //floating form
    // alert('script started!');
    $('.floating-buttons .callback').click(function() {
        $('.floating-form-callback').toggleClass('slide');
    });
    $('.floating-form-callback .overlay, .close').click(function() {
        // alert('overlay clicked');
        $('.floating-form-callback').removeClass('slide');
    });

    $('.floating-buttons .e-brochure').click(function() {
        $('.floating-form-e-brochure').toggleClass('slide');
    });
    $('.floating-form-e-brochure .overlay, .close').click(function() {
        // alert('overlay clicked');
        $('.floating-form-e-brochure').removeClass('slide');
    });
    </script>
<!-- Google Code for Remarketing Tag -->
<!--------------------------------------------------
Remarketing tags may not be associated with personally identifiable information or placed on pages related to sensitive categories. See more information and instructions on how to setup the tag on: http://google.com/ads/remarketingsetup
--------------------------------------------------->
<script type="text/javascript">
/* <![CDATA[ */
var google_conversion_id = 849375917;
var google_custom_params = window.google_tag_params;
var google_remarketing_only = true;
/* ]]> */
</script>
<script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js">
</script>
<noscript>
<div style="display:inline;">
<img height="1" width="1" style="border-style:none;" alt="google" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/849375917/?guid=ON&amp;script=0"/>
</div>
</noscript>
<script src="http://cwc.livserv.in/chat.js?lid=18713" id="lp_cwc_xqzyihjdskw" ></script>
<script src="http://cw1.livserv.in?did=18713&amp;pid=1"></script>
</body>

</html>

<script>		

	function checkCookie() {
			$('#myModal').modal("show");
		}
	function set_cookie()
	{
		$('#myModal').modal("hide");
	}
</script>

<script type="text/javascript">
$(window).load(function(){
$(document).ready(function() {
    $('.field input').keyup(function() {

        var empty = false;
        $('.field input').each(function() {
            if ($(this).val().length == 0) {
                empty = true;
            }
        });

        if (empty) {
            $('.actions input').attr('disabled', 'disabled');
        } else {
            $('.actions input').attr('disabled', false);
        }
    });
});
});

</script>